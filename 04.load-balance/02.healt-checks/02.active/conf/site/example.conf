lua_package_path "/lua-resty-upstream-healthcheck-0.05/lib/?.lua;;";

upstream web {
  server web1;
  server web2;
  server web3;
}

lua_shared_dict healthcheck 1m;

lua_socket_log_errors off;

init_worker_by_lua_block {
  local hc = require "resty.upstream.healthcheck"

  local ok, err = hc.spawn_checker{
    shm = "healthcheck",  -- defined by "lua_shared_dict"
    upstream = "web", -- defined by "upstream"
    type = "http",

    http_req = "GET /status HTTP/1.0\r\nHost: web\r\n\r\n", -- raw HTTP request for checking

    interval = 2000,  -- run the check cycle every 2 sec
    timeout = 1000,   -- 1 sec is the timeout for network operations
    fall = 3,  -- # of successive failures before turning a peer down
    rise = 2,  -- # of successive successes before turning a peer up
    valid_statuses = {200, 302},  -- a list valid HTTP status code
    concurrency = 10,  -- concurrency level for test requests
  }
  if not ok then
    ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
    return
  end

  -- Just call hc.spawn_checker() for more times here if you have
  -- more upstream groups to monitor. One call for one upstream group.
  -- They can all share the same shm zone without conflicts but they
  -- need a bigger shm zone for obvious reasons.
}

server {
  listen 80;
  server_name example.com;

  location / {
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    add_header X-Upstream-Address $upstream_addr;
    add_header x-Upstream-Connection-Time $upstream_connect_time;
    proxy_pass http://web;
  }
}